#summary One-sentence summary of this page.

= GWT JSNI =
 Testing GWT JSNI

 * [http://demogwtjsni.appspot.com Demo]
 * [http://code.google.com/p/gwt-examples/source/browse/#svn/trunk/DemoJSNI/src/org/gonevertical/demo/client Source]


== Code Example JSNI ==
 I send in a reference to the widget.  
{{{
public static native void registerJsni(ToolTipWidget ttw) /*-{

	$wnd.showTooltip_id = function(elementId, html) {
		ttw.@org.gonevertical.demo.client.ToolTipWidget::showTooltip(Ljava/lang/String;Ljava/lang/String;)(elementId, html);
	}
	
	$wnd.showTooltip_xy = function(x, y, html) {
		ttw.@org.gonevertical.demo.client.ToolTipWidget::showTooltip(IILjava/lang/String;)(x, y, html);
	}
	
        $wnd.showTooltip = function(html) {
		ttw.@org.gonevertical.demo.client.ToolTipWidget::showTooltip(Ljava/lang/String;)(html);
	}
	
	$wnd.hideTooltip = function() {
		ttw.@org.gonevertical.demo.client.ToolTipWidget::hideTooltip()();
	}
	
}-*/;
}}}

== Mouse Tracking For Tooltip ==
 Keeping track of the mouse x and y events, and scroll top and left events, is something used in this project. I keep track of the DOM events preview, and use that to store a mouseX and a mouseY. This is like the GWT <1.5 Browser events. You can listen to the DOM events of the entire window, which I use for the tooltip placement.

{{{
/**
 * register mouse and scroll events
 */
private void registerMouse() {
	
	/* deprecated
	DOM.addEventPreview(new EventPreview() {
		public boolean onEventPreview(Event event) {
			mouseX = event.getClientX();
			mouseY = event.getClientY();
			return false;
		}
	});
	*/
	
	/* deprecated
	Event.addEventPreview(new EventPreview() {
		public boolean onEventPreview(Event event) {
			mouseX = event.getClientX();
			mouseY = event.getClientY();
			return false;
		}
	});
	*/
	
	// observe mouse x and y 
	Event.addNativePreviewHandler(new NativePreviewHandler() {
		public void onPreviewNativeEvent(NativePreviewEvent event) {
			NativeEvent e = event.getNativeEvent();
			
			type = e.getType();
			mouseX = e.getClientX();
			mouseY = e.getClientY();
			
			// test
			int wheel = e.getMouseWheelVelocityY();
			
			// debug
			System.out.println("x: " + mouseX + " y: " + mouseY + " wheel: " + wheel + " type: " + type);
		}
	});
	
	// observe scroll event, so we can offset x and y for tooltip
	Window.addWindowScrollHandler(new ScrollHandler() {
		public void onWindowScroll(ScrollEvent event) {
			
			scrollLeft = event.getScrollLeft();
			scrollTop = event.getScrollTop();
			
			// debug
			System.out.println("scrollLeft: " + scrollLeft + " scrollTop: " + scrollTop);
		}
	});
}
}}}