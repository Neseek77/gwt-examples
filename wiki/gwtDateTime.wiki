#summary getting date and time, unix time stamp, start and end of day with Java and GWT.

= How to get Date/Time with/in GWT =
 * get unix time stamp
 * get year, month, day, date, today, current date, timezone offset from gmt, hours, minutes, seconds, milliseconds
 * convert from unix time stamp to java time stamp
 * get the start of day unix time stamp (0:00:00) (12:00:00am)
 * get the end of day unix time stamp (23:59:59) (11:59:59pm)



= Start and End Of Day =
 Get the start of the day 0:00:00 am in seconds
{{{
/**
 * get Start of Day Time Stamp
 * @return unix time stamp (seconds)
 */
private String getDateStart_TimeStamp() {
	
	long ltime = (long) (this.TimeStamp / .001); //my unix time stamp in seconds
	
	//Figure out Unix time stamps for the start of the day and the end of the day
	Date DC = new Date(ltime); //get current Year, Month
	int year = DC.getYear(); //current Year
	int month = DC.getMonth(); //current Month
	int day = DC.getDate();// current Day
	
	Date dateStart = new Date(); //Today @ 0:00:00 am to unix time stamp 
	dateStart.setYear(year); //set year current Year
	dateStart.setMonth(month); //set month current Month
	dateStart.setDate(day); //set current day of month
	dateStart.setMinutes(0); // minute 0
	dateStart.setHours(0);	 // hour 0
	dateStart.setSeconds(0); // second 0
	int iTimeStamp = (int) (dateStart.getTime() * .001);
	String sStart_TimeStamp = Integer.toString(iTimeStamp);
	
	//helps debugging
	System.out.println("this.Time::: " + this.TimeStamp);
	System.out.println("Start Time::: " + sStart_TimeStamp);
	
	return sStart_TimeStamp;
}
}}}

Get the end of the day 23:59:59 in seconds
{{{
/**
 * Get End of Day Time Stamp
 * @return unix time stamp (seconds)
 */
private String getDateEnd_TimeStamp() {
	
	long ltime = (long) (this.TimeStamp / .001); //my unix time stamp in seconds
	
	//Figure out Unix time stamps for the start of the day and the end of the day
	Date DC = new Date(ltime); //get current Year, Month
	int year = DC.getYear(); //current Year
	int month = DC.getMonth(); //current Month
	int day = DC.getDate();// current Day
	
	Date dateEnd = new Date(); //Today @ 23:59:59 to unix time stamp 
	dateEnd.setYear(year); //set year current Year
	dateEnd.setMonth(month); //set month current Month
	dateEnd.setDate(day); //set current day of month
	dateEnd.setHours(23);	// hour 23
	dateEnd.setMinutes(59); // minute 59
	dateEnd.setSeconds(59); // second 59
	int iTimeStamp = (int) (dateEnd.getTime() * .001);
	String sEnd_TimeStamp = Integer.toString(iTimeStamp);
	
	return sEnd_TimeStamp;
}
}}}

= Client's Time Zone =
 This is how I get the client's time zone. 

 This is the easiest way to get the client's time zone. 
{{{
TimeZone tz = TimeZone.getDefault();
timezone = tz.getID(); //like "America/Vancouver"
}}}

{{{
/**
 * get client's time zone
 * @param type
 * @return
 */
private String getTimeZone(int type) {
	Date today = new Date();
	String timezone = null;
	switch (type) {
		case 1: // date timeZoneMinOffset in minutes
			timezone = Integer.toString(today.getTimezoneOffset()); //like "420"
			break;
		case 2: // time zone RFC822
			timezone = DateTimeFormat.getFormat("Z").format(today); //like "-0700"
			break;
		case 3: //time zone TextShort
			timezone = DateTimeFormat.getFormat("v").format(today); //like "GMT-07:00"
			break;
		case 4: //time zone Name 
			TimeZone tz = TimeZone.getDefault();
			timezone = tz.getID(); //like "America/Vancouver"
			break;
		case 5: //timezone TextLong
			timezone = DateTimeFormat.getLongDateTimeFormat().format(today); //like "March 22, 2008 5:39:22 PM GMT-07:00"
			break;
	}
	return timezone;
}
}}}

= Format Minutes to GMT =
 Format minutes to gmt GMT[+|-]hh:mm. The "Date" object timezone minutes offset is positive when it should be negative therefore, would have to change logic below.

{{{
/**
 * format date TimeZone (minutes) to "GMT[+|-]hh:mm"
 * create GMT ID for calendar object to use
 * 
 * @param gmtOffSetMinutes - gmt offset in minutes "[+|-]int"
 * @return gmt string
 */
public static String formatGmtID(int gmtOffSetMinutes) {
	int min = gmtOffSetMinutes;
	
	//test
	//int min = 450; //minutes (Positive or negative Int) (Date Object TimeZone OffSet in Minutes)

	int hh = (int) min / 60; //get hour
	int mm = (int) min % 60; //get minutes (minutes remainder)
	
	int phh = Math.abs(hh); //convert to positive int
	int pmm = Math.abs(mm); //convert to positive int
	
	String shh = getDoubleDigit(phh); //convert it to double digit string '1' = '01', '2' = '02'
	String smm = getDoubleDigit(pmm);
	
	//is int positive or negative?
	String sIsN = Integer.toString(hh);
	boolean isNegative = sIsN.matches("[-].*"); //look for negative symbol in int
	
	//add pos/neg symbol to gmt string
	String addNeg = "";
	if (isNegative == true) {
		addNeg = "-";
	} else {
		addNeg = "+";
	}
	
	//make GMT ID - for calendar object
	String gmt = "GMT" + addNeg + shh + ":" + smm;
	
	//debug
	System.out.println("gmt Test: " + gmt);

	return gmt;
}
}}}