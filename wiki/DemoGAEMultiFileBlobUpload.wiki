#summary demo Google App Engine multi batch file blob upload using GWT

<wiki:gadget url="http://gwt-examples.googlecode.com/svn/trunk/DemoGadgetXml/war/gadget-gwt-examples-ads-v2-atf.xml" height="110" width="760" border="0" />

= Demo GAE Multi Batch File Blob Upload =
 This project is an example of using an japplet to process a directory and get the files and send them back to the gwt with JSNI javascript. We can communicate to the applet using javascript and back to javascript from the java. Although, I saved time and self signed the japplet to get this demo out the door. Check the war folder of GAE_FIleUpload for the signing instructions and other stuff. This is still in the works.

= Demo =
 * [http://demogaemultifileblobupload.appspot.com/ Demo] - Multi upload demo is partially disabled b/c one could upload hundreds of files.
 * [http://code.google.com/p/gwt-examples/source/browse/#svn/trunk/GAE_FileUpload/src/com/gonevertical/upload Applet Source] - Directory Chooser for GWT
 * [http://code.google.com/p/gwt-examples/source/browse/#svn/trunk/DemoGAEMultiFileUpload GWT Project Source] - GWT Project source, using the file directory chooser
 * [http://ourvirtualtours.appspot.com/#vt_view?view=6012 Virtual Tour] - This Virtual Tours files are sitting virtually in the Blob Store. 
 * [http://code.google.com/p/gwt-examples/wiki/DemoGwtAdsene GWT Adsense Wiki] - About integrating adsense into Gawakt.com Virtual Tours site.

==Goal==
 Upload a directory recursively to GAE, then serve it virtually to the web site. GAE code space limit is 150MB, so if I put the files in big table, I can then retrieve them using a servlet, like if they where uploaded into the code space.

==First Try==
 I tried JavaFX to do the file processing, like using the applet to get the files in the second try. Although, the thing that doesn't work with JavaFX is javascript communication on mac and other browsers. Applet or JApplet are more mature for doing things in the Java kingdom at least in reference to communication using Javascript to and from them. I would have loved to use JavaFX b/c I like there app state control, but whats the use if you can't use it with Javascript. 

==Second Try==
 I used the applet to get the files recursively in the directories tree and then sent those back from the applet to the javascript GWT application to process, although I didn't realized the file input was read only and setting the value wasn't possible, at least easily and with out security risks. 

==Third Try==
 I then moved the entire upload process to the applet including getting the blob url. I setup a blob url servlet so I could get the url for the upload. Then I use Apache commons HttpClient,HttpCore,HttpMime libraries to do the uploading of the file which works great. This app is just an example, so all the security measures are not implemented so to try out the process.

== Working Application ==
 I made a 360 degrees virtual tours site to host some of the pictures I have taken. I have used the blob store to virtually store the images. I use integrated google analytics tracking. I use my home grown oauth authentication system following the rules, except through rpc. I have also used the GWT maps api, which works awesome. I'm so pleased with GWT and all the possibilites with the Google apis stack. I also have integrated google Adsense into the application using an iframe and changing it during state changes of the virtual tours. Theres lots more I want to do with this site in time.
 * [http://ourvirtualtours.appspot.com/ Virtual Tours]
 * [http://ourvirtualtours.appspot.com/#vt_view?view=6012 360 Degree Virtual Tour] - This is a virtual tour of Diamond Head Oahu, using virtual file store in the blob store, which works great!
 

== Querying BlobInfo ==
 To query a BlobKey  from BlobInfo GQL, Entity and Java query formats below. 

GQL Syntax
{{{
SELECT * FROM __BlobInfo__ WHERE __key__ = KEY('__BlobInfo__','AMIfv940prQksEQ-cbqa_T3kupYZUKj0jFS6CEWqUfW5gTjuriiJFdVsg_Z4rEBl3aldWS7ygE_Vbcl85IWRE2vtxHvB7GF5sdtE0kIkrPk6c2hsfxlqfdocpu1zeOQygEb8RslST1cF9bT37n_9X1kdQpRtu5gyPB3-AgmpZ1GtbzWyGv7Uj1M')
}}}

Entity Query Syntax - which the java syntax below creates.
{{{
SELECT * FROM __BlobInfo__ WHERE __key__ = __BlobInfo__("Nik60h9zR0zjTB_OnLG9Ow")
}}}

Java Syntax - this will get you the blobkey
{{{
    Entity[] entities = null;
    try {
      DatastoreService datastore = DatastoreServiceFactory.getDatastoreService();
      Query q = new Query("__BlobInfo__");

      if (filter.getBlobKey() != null) { // -> filter is my object I use to drill the blobkey
        Key key = KeyFactory.createKey("__BlobInfo__", filter.getBlobKey());
        q.addFilter("__key__", Query.FilterOperator.EQUAL, key);
      }

      PreparedQuery pq = datastore.prepare(q);
      List<Entity> entList = pq.asList(FetchOptions.Builder.withLimit(limit).offset(offset));

      entities = new Entity[entList.size()];
      entList.toArray(entities);
      
    } catch (Exception e) {
      e.printStackTrace();
    } finally {
    }
}}}

BlobInfoFactory Java Syntax
{{{
  BlobInfoFactory blobInfoFactory = new BlobInfoFactory(DatastoreServiceFactory.getDatastoreService());
  BlobInfo blobInfo = blobInfoFactory.loadBlobInfo(blobKey);
}}}