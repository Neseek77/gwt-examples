#summary Microsoft SQL Server 2000/2005 JDBC connection

== note about Microsoft JDBC Connector ==
 I have found working with the Microsoft JDBC connector a bit lacking. I wouldn't recommend using MS SQL database, but rather MySQL which is much more flexible and powerful in my opinion. But if you have to connect to a MS SQL database here is how I have done it.  


= JDBC MS SQL Connector =
 First you have to uses Microsofts JDBC connector instead of MySQL connector
 * [http://msdn.microsoft.com/en-us/data/aa937724.aspx MS JDBC Connector] - download and add it to your Java Libraries
 * Be aware that the library and class for 2000 vs 2005 server is different. 

= Code Examples =
 MS SQL example methods and classes

 Connection Example
{{{
public class DB_Conn {
	
	private java.sql.Connection con = null;
	private final String url = "jdbc:microsoft:sqlserver://";
	private final String serverName = "ip/host";
	private final String portNumber = "1433";
	private final String databaseName = "catalog";
	private final String userName = "user";
	private final String password = "password";
	
	// Informs the driver to use server a side-cursor, 
	// which permits more than one active statement 
	// on a connection.
	private final String selectMethod = "cursor";

	public DB_Conn() {
	}

    private java.sql.Connection getConnection() {
		try {
                        // Note: this class name changes for ms sql server 2000 thats it
                        // It has to match the JDBC library that goes with ms sql 2000
			Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
			con = DriverManager.getConnection(getConnectionUrl());

			if (con != null)
				System.out.println("Connection Successful!");
		} catch (Exception e) {
			e.printStackTrace();
			System.out.println("Error Trace in getConnection() : "
					+ e.getMessage());
		}
		return con;
	}

	private String getConnectionUrl() {
		String url = "jdbc:sqlserver://" + serverName + ";user=" + userName
				+ ";password=" + password + ";databaseName=" + databaseName
				+ ";";
		return url;
	}

	/*
	     Display the driver properties, database details 
	 */

	public void displayDbProperties() {
		java.sql.DatabaseMetaData dm = null;
		java.sql.ResultSet rs = null;
		try {
			con = this.getConnection();
			if (con != null) {
				dm = con.getMetaData();
				System.out.println("Driver Information");
				System.out.println("\tDriver Name: " + dm.getDriverName());
				System.out
						.println("\tDriver Version: " + dm.getDriverVersion());
				System.out.println("\nDatabase Information ");
				System.out.println("\tDatabase Name: "
						+ dm.getDatabaseProductName());
				System.out.println("\tDatabase Version: "
						+ dm.getDatabaseProductVersion());
				System.out.println("Avalilable Catalogs ");
				rs = dm.getCatalogs();
				while (rs.next()) {
					System.out.println("\tcatalog: " + rs.getString(1));
				}
				rs.close();
				rs = null;
				closeConnection();
			} else
				System.out.println("Error: No active Connection");
		} catch (Exception e) {
			e.printStackTrace();
		}
		dm = null;
	}

	private void closeConnection() {
		try {
			if (con != null)
				con.close();
			con = null;
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	public static void main(String[] args) throws Exception {
		DB_Conn myDbTest = new DB_Conn();
		myDbTest.displayDbProperties();
	}
}
}}}