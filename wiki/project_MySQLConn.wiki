#summary More notes on how to connect to mysql database

= JDBC Connector =
 * Add a JDBC connector jar to your Build Path
 * I put it here. My Projects are configured like: /opt/gwt-linux/mysql-connector-java-5.0.8-bin.jar
 * Check your Eclipse referenced libraries for jar
 * Example Eclipse Project Source code of Mysql Conn - http://gwt-examples.googlecode.com/svn/trunk/gwt-test-MySQLConn/src/com/tribling/gwt/test/mysqlconn/server/
 == Links ==
 * JDBC Connector - http://www.mysql.com/products/connector/j/ - download MySQL Connector/J 5.1
 * Example MySQL Database, The King James Bible [http://sourceforge.net/project/showfiles.php?group_id=186532&package_id=249676&release_id=548680 Download Bible Database Here] (It comes as a MySQL Dump)

= Tomcat Setup =
 Fix this problem: java.security.AccessControlException access denied (java.net.SocketPermission localhost resolve)
 You will need to change Tomcat configuration.
{{{
#for debian/ubuntu
# I added to /etc/tomcat5.5/policy.d/04webapps.policy
# Or make your own /etc/tomcat5.5/policy.d/myGWTPolicys.policy
# you can also change file to: file:/apps/directory/yourGWTTomcatApps/- 
grant codeBase "file:${catalina.home}/webapps/-" {
      permission java.net.SocketPermission "192.168.12.81:3306", "connect";
};
}}} 


= Code Snippets =

 == MySQL Connection ==
 Connect to db. Don't forget to change the parameters.
{{{
/**
 * db conn
 * 
 * Make sure you add a reference library (external jar in build path) JDBC Connector - 
 * You will see I put it in /opt/gwt-linux/mysql-connector-java-5.0.8-bin.jar
 * 
 * @return Connection
 */
private Connection getConn() {

  	    Connection conn	= null;
	    String url 		= "jdbc:mysql://192.168.12.81:3306/";
	    String db 		= "hostdb";
	    String driver 	= "com.mysql.jdbc.Driver";
	    String user 	= "";
	    String pass 	= "";
		
        try {
                Class.forName(driver).newInstance();
        } catch (InstantiationException e) {
                e.printStackTrace();
        } catch (IllegalAccessException e) {
                e.printStackTrace();
        } catch (ClassNotFoundException e) {
                e.printStackTrace();
        }
        try {
        		
        		conn = DriverManager.getConnection(url+db, user, pass);
        } catch (SQLException e) {
        		System.err.println("Mysql Connection Error: ");
                e.printStackTrace();
        }
		return conn;
}
}}}

 == Get Row Count ==
 Use this to size an array for your values
{{{
/*
 * get row count
 */
protected static int getResultSetSize(ResultSet resultSet) {
    int size = -1;

    try {
        resultSet.last();
        size = resultSet.getRow();
        resultSet.beforeFirst();
    } catch(SQLException e) {
        return size;
    }

    return size;
}
}}}

 == Query ==
 Query statement, with connection, statement, resultset, and get record.
{{{
/**
 * method to test query
 */
public void queryMyDB() {

	String Query = this.BookQuery;
	
    try {
    	Connection connection = this.getConn();
        Statement select = connection.createStatement();
        ResultSet result = select.executeQuery(Query);
        
        //get count so I can set my array to the right length
        int rsSize = getResultSetSize(result); 
        this.StartBook = new String[rsSize];
        
        int i = 0;
        while (result.next()) {
      
        	this.StartBook[i] = result.getString(1);
        	
        	//this is a great way to see what is going on in the Eclipse Console or using a JVM
        	System.out.println("Book: " + result.getString(1));
            
        	
        	i++;
        }
        connection.close();
    } catch(Exception e) {
    	
    	//debug out output this way
    	System.err.println("Mysql Statement Error: StartBook: " + Query);
    	e.printStackTrace();
    	
    }
	
}
}}}

 == Update ==
 UUID gets you a unique session id to work with. 
{{{
//create a unique session id to store
UUID uID = UUID.randomUUID();
this.SessionID = uID.toString();

//save session data to table 
String Query = "INSERT INTO `session` (UserID, SessionID, LastAccessed, DateCreated) " +
			   "VALUES ('" + this.dbUserID + "', '" + this.SessionID + "' , UNIX_TIMESTAMP(), UNIX_TIMESTAMP());";

try {
	Connection connection = this.getConn();
    Statement update = connection.createStatement();
    update.executeUpdate(Query);
    
    //get last id
    ResultSet rs = update.getGeneratedKeys(); 

    if (rs != null && rs.next()) { 
    	int rsID = rs.getInt(1);  //unique record to which the session is stored
    }

    //debug
    System.out.println("SessionID Created: " + this.SessionID);
    
    rs.close();
    connection.close();
    
} catch(Exception e) {
	//debug out output this way
	System.err.println("Mysql Statement Error: " + Query);
	e.printStackTrace();
	
}
}}}


 == Escape String For SQL ==
 Apache has some cool functions for escaping strings. This can only be run on server side, preparing the sql data for insert. You don't have to unescape b/c it comes out as is. It just allows you to save with "'" '"' in the string.
 * Right Click Project > Build Path > Configure Build Path > Libraries > Add External Jar
 * Link to Apache jar documentation: [http://commons.apache.org/lang/api-release/index.html?org/apache/commons/lang/StringEscapeUtils.html Classes Documentation]
 * Download Jar: [http://commons.apache.org/lang/ Goto Download]
{{{
import org.apache.commons.lang.StringEscapeUtils;

/**
 * escape string to db
 * @param s
 * @return
 */
protected static String escapeForSql(String s) {

	String rtn = StringEscapeUtils.escapeSql(s);
	
	return rtn;
}
}}}

 Improved Escape method for fixing data before its stuck into db
{{{
/**
 * escape string to db
 * 
 * remove harmfull db content
 * remove harmfull tags
 *
 * @param s
 * @return
 */
protected static String escapeForSql(String s) {
	
	//remove harmful HTML tags
	if (s != null) {
		s = s.replaceAll("(?i)</?(HTML|SCRIPT|HEAD|CSS)\\b[^>]*>", "");	
	}

	String rtn = StringEscapeUtils.escapeSql(s);
	
	//escape utils returns null if null
	if (rtn == null) {
		rtn = "";
	}

	return rtn;
}
}}}