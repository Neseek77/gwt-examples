#summary More notes on how to connect to mysql database

====Advertising====
[http://click.linksynergy.com/fs-bin/click?id=QCdCuKxPYyY&offerid=135505.10000397&type=4&subid=0 http://cdn.netflix.com/us/affiliates/banners/0804/120090A_599.gif][http://ad.linksynergy.com/fs-bin/show?id=QCdCuKxPYyY&bids=135505.10000397&type=4&subid=0&fromGoogleCode.png]   [http://click.linksynergy.com/fs-bin/click?id=QCdCuKxPYyY&offerid=146261.10003722&type=4&subid=0 http://images.apple.com/itunesaffiliates/US/2008/10/04/AsteroidsGalaxy_120x90.jpg][http://ad.linksynergy.com/fs-bin/show?id=QCdCuKxPYyY&bids=146261.10003722&type=4&subid=0&fromGoogleCode.png]     [http://click.linksynergy.com/fs-bin/click?id=QCdCuKxPYyY&offerid=164496.10000003&type=4&subid=0 http://www.popcornopolis.com/landingpages/2008/banners/fall_08/120x90_tin.gif][http://ad.linksynergy.com/fs-bin/show?id=QCdCuKxPYyY&bids=164496.10000003&type=4&subid=0&fromGoogleCode.png]    [http://click.linksynergy.com/fs-bin/click?id=QCdCuKxPYyY&offerid=137601.10000059&type=4&subid=0 http://marketing.vistaprint.com/us/imgs/bannerads/FALL_120x90.gif][http://ad.linksynergy.com/fs-bin/show?id=QCdCuKxPYyY&bids=137601.10000059&type=4&subid=0&fromGoogleCode.png]    [http://click.linksynergy.com/fs-bin/click?id=QCdCuKxPYyY&offerid=129871.10000065&type=4&subid=0 http://www.acronym.com/sirius/SIRIUS%20Banners/NFL/120x90_nfl.gif][http://ad.linksynergy.com/fs-bin/show?id=QCdCuKxPYyY&bids=129871.10000065&type=4&subid=0&fromGoogleCode.png]

=Table of Contents= 
<wiki:toc max_depth="2" />

= Update =
 SVN source has a complete eclipse project, which was updated on 9/7/2008. I added an rpc example to. I added a demo.

= Demos =
 * [http://gawkat.com/MySQLConn/ MySQL Connection/Query & RPC in Action Demo] - Transport MySQL data from server to client with RPC/Remote Procedure Call.
 * [http://gawkat.com/Feedback/ Feedback widget Demo] - Try the feedback widget out. More at bottom.

= JDBC Connector =
 * Add a JDBC connector jar to your Build Path
 * I put it here. My Projects are configured like: /opt/gwt-linux/mysql-connector-java-5.0.8-bin.jar
 * Check your Eclipse referenced libraries for jar
 * Example Eclipse Project Source code of Mysql Conn - http://gwt-examples.googlecode.com/svn/trunk/gwt-test-MySQLConn/src/com/tribling/gwt/test/mysqlconn/server/
 == Links ==
 * JDBC Connector - http://www.mysql.com/products/connector/j/ - download MySQL Connector/J 5.1
 * Example MySQL Database, The King James Bible [http://sourceforge.net/project/showfiles.php?group_id=186532&package_id=249676&release_id=548680 Download Bible Database Here] (It comes as a MySQL Dump)

= Tomcat Setup =
 When you use tomcat, the servlet container has to be given access outside of its container. More info here: [gwtTomcat].

 * Fix this problem: java.security.AccessControlException access denied (java.net.SocketPermission localhost resolve)
 * More information on this here: [gwtTomcat]
 You will need to change Tomcat configuration.
{{{
#for debian/ubuntu
# I added to /etc/tomcat5.5/policy.d/04webapps.policy
# Or make your own /etc/tomcat5.5/policy.d/myGWTPolicys.policy
# you can also change file to: file:/apps/directory/yourGWTTomcatApps/- 
grant codeBase "file:${catalina.home}/webapps/-" {
      permission java.net.SocketPermission "192.168.12.81:3306", "connect";
};
}}} 


= Code Snippets =

 == MySQL Connection ==
 Connect to db. Don't forget to change the parameters.
{{{
/**
 * db conn
 * 
 * Make sure you add a reference library (external jar in build path) JDBC Connector - 
 * You will see I put it in /opt/gwt-linux/mysql-connector-java-5.0.8-bin.jar
 * 
 * @return Connection
 */
private Connection getConn() {

  	    Connection conn	= null;
	    String url 		= "jdbc:mysql://192.168.12.81:3306/";
	    String db 		= "hostdb";
	    String driver 	= "com.mysql.jdbc.Driver";
	    String user 	= "";
	    String pass 	= "";
		
        try {
                Class.forName(driver).newInstance();
        } catch (InstantiationException e) {
                e.printStackTrace();
        } catch (IllegalAccessException e) {
                e.printStackTrace();
        } catch (ClassNotFoundException e) {
                e.printStackTrace();
        }
        try {
        		
        		conn = DriverManager.getConnection(url+db, user, pass);
        } catch (SQLException e) {
        		System.err.println("Mysql Connection Error: ");
                e.printStackTrace();
        }
		return conn;
}
}}}

 == Get Row Count ==
 Use this to size an array for your values
{{{
/*
 * get row count
 */
protected static int getResultSetSize(ResultSet resultSet) {
    int size = -1;

    try {
        resultSet.last();
        size = resultSet.getRow();
        resultSet.beforeFirst();
    } catch(SQLException e) {
        return size;
    }

    return size;
}
}}}

 == Query ==
 Query statement, with connection, statement, resultset, and get record.
{{{
/**
 * method to test query
 */
public void queryMyDB() {

String query = "SELECT * FROM table";
 
  try {
    Connection conn = this.getConn();
    Statement select = conn.createStatement();
    ResultSet result = select.executeQuery(query);
    while (result.next()) {
    	String s = result.getString(1);
    }
    select.close();
    result.close();
    conn.close();
  } catch(SQLException e) {
	System.err.println("Mysql Statement Error: " + query);
	e.printStackTrace();
  }
}}}

 == Update / Insert ==
 UUID gets you a unique session id to work with. 
{{{
//create a unique session id to store
UUID uID = UUID.randomUUID();
this.SessionID = uID.toString();

//save session data to table 
String query = "INSERT INTO `session` (UserID, SessionID, LastAccessed, DateCreated) " +
			   "VALUES ('" + this.dbUserID + "', '" + this.SessionID + "' , UNIX_TIMESTAMP(), UNIX_TIMESTAMP());";

  try {
    Connection conn = this.getConn();
    Statement update = conn.createStatement();
    update.executeUpdate(query);
    
    //get last id 
    ResultSet result = update.getGeneratedKeys(); 
    if (result != null && result.next()) { 
        int rsId = result.getInt(1);  
    }

    result.close();
    update.close();
    conn.close();
  } catch(SQLException e) {
    System.err.println("Mysql Statement Error: " + query);
    e.printStackTrace();
  }
}}}


 == Escape String For SQL ==
 Apache has some cool functions for escaping strings. This can only be run on server side, preparing the sql data for insert. You don't have to unescape b/c it comes out as is. It just allows you to save with "'" '"' in the string.
 * Right Click Project > Build Path > Configure Build Path > Libraries > Add External Jar
 * Link to Apache jar documentation: [http://commons.apache.org/lang/api-release/index.html?org/apache/commons/lang/StringEscapeUtils.html Classes Documentation]
 * Download Jar: [http://commons.apache.org/lang/ Goto Download]
{{{
import org.apache.commons.lang.StringEscapeUtils;

/**
 * escape string to db
 * @param s
 * @return
 */
protected static String escapeForSql(String s) {

	String rtn = StringEscapeUtils.escapeSql(s);
	
	return rtn;
}
}}}

 Improved Escape method for fixing data before its stuck into db
{{{
/**
 * escape string to db
 * 
 * remove harmfull db content
 * remove harmfull tags
 *
 * @param s
 * @return
 */
protected static String escapeForSql(String s) {
	
	//remove harmful HTML tags
	if (s != null) {
		s = s.replaceAll("(?i)</?(HTML|SCRIPT|HEAD|CSS)\\b[^>]*>", "");	
	}

	String rtn = StringEscapeUtils.escapeSql(s);
	
	//escape utils returns null if null
	if (rtn == null) {
		rtn = "";
	}

	return rtn;
}
}}}

= Trasporting Data / Recordsets Around =
 This is an example of how I transport data from server to client and back. This is my favorite way and by far the most efficient and easiest way to do it.

 I use a class like this to store MySQL record set data into an object array. This makes it very easy to pass around data. Now if you use private methods and/or fields in the class that goes from server to client, you will have have to change Tomcat security. See more in [gwtTomcat].
{{{
/**
 * I use this class to store my mysql recordset in an object that is an array.
 * This will give an example of how I pass data from the server to client in an object, 
 * one of my favorites for its simplicity.
 * 
 * @author branflake2267
 *
 */
public class BibleData implements IsSerializable {

	// fields to store data
	public String book;
	public int howManyChapters;
	public int howManyVerses;
	
	/**
	 * constructor
	 */
	public BibleData() {
		// nothing to do when transporting
	}
	
}
}}}

 This is an example of how I spool the data into the Object Array from MySQL.
{{{
public BibleData[] getBibleInfo() {
	
	String query = "SELECT bid, en FROM book;";
	
	// prepare for rpc transport
	BibleData[] bibleData = null;
	
    try {
    	Connection connection = getConn();
        Statement select = connection.createStatement();
        ResultSet result = select.executeQuery(query);
       
        // init object into the size we need, like a recordset
        int rsSize = getResultSetSize(result); //size the array
        bibleData = new BibleData[rsSize];
        
        int i = 0;
        while (result.next()) {
        	
        	// init each object in the array !!!!
        	bibleData[i] = new BibleData(); // <-THIS IS CRITICAL TO REMEMBER!!!! init each array with the object type (I forget to do this so often)
        	
        	int bid = result.getInt(1);
        	bibleData[i].book = result.getString(2);
        	bibleData[i].howManyChapters = getHowManyChapters(bid);
        	bibleData[i].howManyVerses = getHowManyVerses(bid);
        	
            i++;
        }
        
        // clean up
        result.close();
        connection.close();
        
    } catch(Exception e) {
    	
    	System.err.println("Mysql Statement Error: " + query);
    	e.printStackTrace();
    	
    }
	
    // return the array
    return bibleData;
}
}}}

= Feed Back Widget =
The feedback widget in the repository gathers up the inputs and sends them to the server and inserts them into MySql. 

 * [http://gawkat.com/Feedback/ Feedback widget Demo]
 * [http://code.google.com/p/gwt-examples/source/browse/#svn/trunk/gwt-Feedback SVN FeedBack Widget Project] - Eclipse project for my Feedback widget

 My Feedback Table
{{{
CREATE TABLE `gv_feedback` (
  `ID` int(11) NOT NULL auto_increment,
  `UserID` int(11) default NULL,
  `FromEmail` varchar(150) default NULL,
  `FromName` varchar(150) default NULL,
  `Subject` varchar(250) default NULL,
  `Message` text,
  `Suggestion` tinyint(1) default '0',
  `Comment` tinyint(1) default '0',
  `Problem` tinyint(1) default '0',
  `Other` tinyint(1) default '0',
  `Post` tinyint(1) default NULL,
  `DateCreated` int(11) NOT NULL default '0',
  `LastUpdated` int(11) default NULL,
  PRIMARY KEY  (`ID`),
  KEY `UserID` (`UserID`)
) ENGINE=MyISAM DEFAULT CHARSET=latin1
}}}