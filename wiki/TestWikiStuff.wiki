#summary test out wiki stuff

-

{{{
    <!-- META-INF/web.xml -->
    <!-- ssl -->
    <security-constraint>
        <web-resource-collection>
            <url-pattern>/*</url-pattern>
        </web-resource-collection>
        <user-data-constraint>
            <transport-guarantee>CONFIDENTIAL</transport-guarantee>
        </user-data-constraint>
    </security-constraint>

        <!-- task -->
	<servlet-mapping>
		<servlet-name>Task</servlet-name>
		<url-pattern>/task</url-pattern>
	</servlet-mapping>
	<servlet>
		<servlet-name>Task</servlet-name>
		<servlet-class>com.gonevertical.server.servlet.Servlet_Task</servlet-class>
	</servlet>
}}}

{{{
// task start reqeust setup 
 String url = "/task?task=" + task;
 try {
      TaskOptions taskOptions = TaskOptions.Builder.withUrl(url).
          header("Cookie", sp.getHeader("Cookie")).method(Method.GET);
      Queue queue = QueueFactory.getDefaultQueue();
      queue.add(taskOptions);
    } catch (Exception e) {
      new Db_Task_Monitor(sp).deleteTaskData(taskId);
      log.severe("Db_Task(): Error: setting up task in que. deleting task. " + e.toString());
      e.printStackTrace();
      return -1;
    }
}}}

{{{
public class AuthEvent extends GwtEvent<AuthEventHandler> {

  public static Type<AuthEventHandler> TYPE = new Type<AuthEventHandler>();

  public static enum Auth {

    /**
     * user was logged in
     */
    LOGGEDIN, 

    /**
     * user logged out 
     */
    LOGGEDOUT;
  }

  private Auth auth;

  private UserData userData;

  public AuthEvent(Auth auth) {
    this.auth = auth;
    userData = null;
  }

  public AuthEvent(Auth auth, UserData userData) {
    this.auth = auth;
    this.userData = userData;
  }

  @Override
  public Type<AuthEventHandler> getAssociatedType() {
    return TYPE;
  }

  @Override
  protected void dispatch(AuthEventHandler handler) {
    handler.onAuthEvent(this);
  }

  public Auth getAuthEvent() {
    return auth;
  }

  public UserData getUserData() {
    return userData;
  }

}
}}}

{{{
public interface AuthEventHandler extends EventHandler {
  public void onAuthEvent(AuthEvent event);
}
}}}

{{{
public class UserData implements IsSerializable {

  /**
   * Google User Id
   */
  private Long id;
  
  private String nickName;
  
  private String userId;
  
  private String email;
  
  private boolean isAdmin;
  
  private boolean isLoggedIn;
  
  public UserData() {
  }
  
  public void setId(Long id) {
    this.id = id;
  }
  public Long getId() {
    return id;
  }
  
  public void setNickName(String nickName) {
    this.nickName = nickName;
  }
  public String getNickName() {
    return nickName;
  }
  
  public void setUserId(String userId) {
    this.userId = userId;
  }
  public String getUserId() {
    return userId;
  }
  
  public void setEmail(String email) {
    this.email = email;
  }
  public String getEmail() {
    return email;
  }
  
  public void setIsAdmin(boolean isAdmin) {
    this.isAdmin = isAdmin;
  }
  public boolean getIsAdmin() {
    return isAdmin;
  }

  public void setIsLoggedIn(boolean isLoggedIn) {
    this.isLoggedIn = isLoggedIn;
  }
  public boolean getIsLoggedIn() {
    return isLoggedIn;
  }

  public String toString() {
    String s = "";
    s += "id=" + id + " ";
    s += "nickName=" + nickName + " ";
    s += "userId=" + userId + " ";
    s += "email=" + email + " ";
    s += "isAdmin=" + isAdmin + " ";
    s += "isLoggedIn=" + isLoggedIn + " ";
    return s;
  }
}
}}}