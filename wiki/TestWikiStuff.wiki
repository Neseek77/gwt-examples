#summary test out wiki stuff

{{{
Brandon Donnelson
http://gwt-examples.googlecode.com
http://c.gawkat.com
Challenge is to: Spice up the java forum with some profile pictures, lets beat the python community. :)
}}}


{{{
  private boolean doSomeExist() {
    DatastoreService datastore = DatastoreServiceFactory.getDatastoreService();
    Query q = new Query("BlobTmpJdo");
    PreparedQuery pq = datastore.prepare(q);
    long l = pq.countEntities(FetchOptions.Builder.withLimit(1));
    boolean b = false;
    if (l > 0) {
      b = true;
    }
    return b;
  }

  private boolean doSomeExist() {
    PersistenceManager pm = sp.getPersistenceManager();
    boolean b = false;
    try {
      javax.jdo.Query q = pm.newQuery("select id from " + BlobTmpJdo.class.getName());
      List<String> ids = (List<String>) q.execute();
      Iterator<String> itr = ids.iterator();
      while(itr.hasNext()) {
        b = true;
        break;
      }
      q.closeAll();
    } catch (Exception e) { 
      e.printStackTrace();
      log.log(Level.SEVERE, "", e);
    } finally {
      pm.close();
    }
    return b;
  }
}}}

{{{
  private BlobKey tryfindingBlobKey() {
    log.info("tryfindingBlobKey(): filename=" + filename);
    
    String skey = null;
    DatastoreService datastore = DatastoreServiceFactory.getDatastoreService();
    try {
      Query q = new Query("__BlobInfo__");
      q.addFilter("filename", FilterOperator.EQUAL, filename);
      PreparedQuery e = datastore.prepare(q);
      Iterator<Entity> itr = e.asIterator();
      while (itr.hasNext()) {
        Entity entity = itr.next();
        Key k = entity.getKey(); 
        // #GAE needs a k.getStringId(); // only has k.getId();
        String sk = k.toString();
        String sbk = sk.replaceFirst(".*?\"", "");
        sbk = sbk.replaceFirst("\".*", "");
        skey = sbk;
      }
    } catch (Exception e) {
      success = false;
      log.log(Level.SEVERE, "decode(): ERROR: ", e);
    } 
    
    BlobKey blobKey = null;
    if (skey != null) {
      blobKey = new BlobKey(skey);
    } else {
      log.warning("tryfindingBlobKey(): warn: wasn't able to parse the blobkey or find the file: skey=" + skey);
    }
    
    return blobKey;
  }
}}}